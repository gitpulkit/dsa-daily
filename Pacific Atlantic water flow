class Solution:
    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        rows = len(heights)
        cols = len(heights[0])

        pac = [[False]*cols for _ in range(rows)]
        atl = [[False]*cols for _ in range(rows)]

        def dfs(r:int, c:int, seen: List[List[bool]]):
            seen[r][c] = True
            dirs = [(-1,0),(1,0),(0,1),(0,-1)]
            for dr, dc in dirs:
                nr, nc = r + dr, c + dc
                if 0 <= nr < rows and 0<= nc < cols:
                    if not seen[nr][nc] and heights[nr][nc] >= heights[r][c]:
                        dfs(nr, nc, seen)


        for c in range(cols):
            dfs(0, c, pac)
        for r in range(rows):
            dfs(r,0,pac)

        for c in range(cols):
            dfs(rows - 1, c, atl)
        for r in range(rows):
            dfs(r, cols - 1, atl)

        ans = []
        for r in range(rows):
            for c in range(cols):
                if pac[r][c] and atl[r][c]:
                    ans.append([r,c])
        return ans
